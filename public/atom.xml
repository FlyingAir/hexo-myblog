<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ヽ(￣▽￣)ﾉ</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.jonyjay.com/"/>
  <updated>2018-04-10T06:23:45.384Z</updated>
  <id>http://blog.jonyjay.com/</id>
  
  <author>
    <name>Jony Jay</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript知识点整理</title>
    <link href="http://blog.jonyjay.com//posts/16111/"/>
    <id>http://blog.jonyjay.com//posts/16111/</id>
    <published>2018-04-10T02:11:03.905Z</published>
    <updated>2018-04-10T06:23:45.384Z</updated>
    
    <content type="html"><![CDATA[<p>看到的、用到的一些js知识点整理<br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>好记性不如烂笔头！更何况没有好记性！</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="JavaScript-作用域"><a href="#JavaScript-作用域" class="headerlink" title="JavaScript 作用域"></a>JavaScript 作用域</h3><h4 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h4><blockquote><p>简单地说，词法作用域就是定义在词法阶段的作用域。换句话说，词法作用域是由你在写代码时将变量和块作用域写在哪里来决定的，因此当词法分析器处理代码时会保持作用域不变(大部分情况下是这样的)。</p></blockquote><h4 id="动态作用域"><a href="#动态作用域" class="headerlink" title="动态作用域"></a>动态作用域</h4><blockquote><p>在JS里，动态作用域和this机制息息相关。它的作用域诗是在运行的过程中确定的</p></blockquote><p><strong>区别：</strong></p><ul><li>词法作用域是在写代码或者说定义时确定的，而动态作用域是在运行时确定的。</li><li>词法作用域关注函数在何处声明，而动态作用域关注函数从何处调用。<h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4>js中，生成作用域的方式：</li><li><strong><em>函数</em></strong></li><li>with、eval (不建议使用，影响性能)<h3 id="JS内部运行机制"><a href="#JS内部运行机制" class="headerlink" title="JS内部运行机制"></a>JS内部运行机制</h3><h4 id="编译阶段"><a href="#编译阶段" class="headerlink" title="编译阶段"></a>编译阶段</h4><strong>词法分析（Lexing）</strong><blockquote><p>这个过程会将由字符组成的字符串分解成(对编程语言来说)有意义的代码块，这些代 码块被称为词法单元(token)。<br><strong>语法分析（Parsing）</strong><br>这个过程是将词法单元流(数组)转换成一个由元素逐级嵌套所组成的代表了程序语法 结构的树。这个树被称为“抽象语法树”(Abstract Syntax Tree，AST)。<br><strong>生成可执行代码</strong><br>将 AST 转换为可执行代码的过程称被称为代码生成。</p><h4 id="执行阶段"><a href="#执行阶段" class="headerlink" title="执行阶段"></a>执行阶段</h4></blockquote></li></ul><h3 id="this-哪个对象调用函数，函数里面的this指向哪个对象"><a href="#this-哪个对象调用函数，函数里面的this指向哪个对象" class="headerlink" title="this(哪个对象调用函数，函数里面的this指向哪个对象)"></a>this(哪个对象调用函数，函数里面的this指向哪个对象)</h3><h4 id="new-做了什么"><a href="#new-做了什么" class="headerlink" title="new()做了什么"></a>new()做了什么</h4><blockquote><ol><li>创建一个新对象</li><li>将构造函数的作用域赋给新对象（因此this就指向了这个新对象）</li><li>执行构造函数中的代码（为这个新对象添加属性）</li><li>返回新对象</li></ol></blockquote><p><strong>注意点：</strong>在构造函数里面返回一个对象，会直接返回这个对象，而不是执行构造函数后创建的对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> TestClass = fucntion()&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=<span class="string">'JonyJay'</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        username: <span class="string">'fay'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> subClass = newTestClass();</span><br><span class="line"><span class="comment">//&#123;username:'fay'&#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="apply和call调用"><a href="#apply和call调用" class="headerlink" title="apply和call调用"></a>apply和call调用</h4><p><code>call</code> 和 <code>apply</code> 的作用，完全一样，唯一的区别就是在参数上面。<br><code>call</code> 接收的参数不固定，第一个参数是函数体内 <code>this</code> 的指向，第二个参数以下是依次传入的参数。<br><code>apply</code>接收两个参数，第一个参数也是函数体内 <code>this</code> 的指向。第二个参数是一个集合对象（数组或者类数组）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn=<span class="function"><span class="keyword">function</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">fn.call(<span class="built_in">window</span>,arr)</span><br><span class="line"><span class="comment">//[1,2,3]</span></span><br><span class="line">fn.apply(<span class="built_in">window</span>,arr)</span><br><span class="line"><span class="comment">//1,2,3</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1=&#123;</span><br><span class="line">    a:<span class="number">222</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2=&#123;</span><br><span class="line">    a:<span class="number">111</span>,</span><br><span class="line">    fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj2.fn.call(obj1);</span><br></pre></td></tr></table></figure><p>此时虽然是 <code>obj2</code> 调用方法，但是使用 了<code>call</code>，动态的把 <code>this</code> 指向到 <code>obj1</code>。相当于这个 <code>obj2.fn</code> 这个执行环境是 <code>obj1</code></p><h4 id="箭头函数调用"><a href="#箭头函数调用" class="headerlink" title="箭头函数调用"></a>箭头函数调用</h4><p>箭头函数里面，没有 <code>this</code> ，箭头函数里面的 <code>this</code> 是继承外面的环境。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">    a:<span class="number">222</span>,</span><br><span class="line">    fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>.a)&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.fn();<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></p><p>虽然 <code>fn()</code>里面的 <code>this</code>是指向 <code>obj</code>，但是，传给 <code>setTimeout</code>的是普通函数， <code>this</code>指向是 <code>window</code>， <code>window</code>下面没有 <code>a</code>，所以这里输出 <code>undefined</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">    a:<span class="number">222</span>,</span><br><span class="line">    fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>.a)&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.fn();<span class="comment">//222</span></span><br></pre></td></tr></table></figure></p><p>这次输出 222 是因为，传给 <code>setTimeout</code>的是箭头函数，然后箭头函数里面没有 <code>this</code>，所以要向上层作用域查找，在这个例子上， <code>setTimeout</code>的上层作用域是 <code>fn</code>。而 <code>fn</code> 里面的 <code>this</code>指向 <code>obj</code> ，所以 <code>setTimeout</code>里面的箭头函数的 <code>this</code>，指向 <code>obj</code>。所以输出 222</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p><strong>当一个函数能够记住并访问到其所在的词法作用域及作用域链，特别强调是在其定义的作用域外进行的访问，此时该函数和其上层执行上下文共同构成闭包。</strong></p><ol><li>闭包一定是函数对象</li><li>闭包和词法作用域，作用域链，垃圾回收机制息息相关</li><li>当函数一定是在其定义的作用域外进行的访问时，才产生闭包</li><li>闭包是由该函数和其上层执行上下文共同构成<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> now=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        doAdd:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            now++;</span><br><span class="line">            <span class="built_in">console</span>.log(now);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到的、用到的一些js知识点整理&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://blog.jonyjay.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://blog.jonyjay.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端开发工作中遇到的问题整理</title>
    <link href="http://blog.jonyjay.com//posts/16110/"/>
    <id>http://blog.jonyjay.com//posts/16110/</id>
    <published>2018-04-09T06:20:56.637Z</published>
    <updated>2018-04-10T02:12:29.167Z</updated>
    
    <content type="html"><![CDATA[<p>整理一些前端开发工作中遇到的冷门问题。<br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>测试</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="测试网"><a href="#测试网" class="headerlink" title="测试网"></a>测试网</h3><ol><li>transform：translate(50%,50%)的坑<blockquote><p>最近在项目提交后测试部门反馈这样的问题，在模态框打开后其中的文字和边框都出现了模糊的现象。<br>经查看发现问题原因：由于图层渲染的时候也处理了周围的文字，如果高度为奇数的文字可能会存在半个像素的计算量，浏览器对这半个像素会进行优化渲染，所以边缘会出现模糊的情况。</p></blockquote></li></ol><p>优化方法： 将元素的高度、宽度设置为偶数可解决；</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>测试</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理一些前端开发工作中遇到的冷门问题。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://blog.jonyjay.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://blog.jonyjay.com/tags/JavaScript/"/>
    
      <category term="Css" scheme="http://blog.jonyjay.com/tags/Css/"/>
    
      <category term="Html" scheme="http://blog.jonyjay.com/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>各种酷炫的Github头像、图片</title>
    <link href="http://blog.jonyjay.com//posts/16109/"/>
    <id>http://blog.jonyjay.com//posts/16109/</id>
    <published>2017-12-14T11:00:13.607Z</published>
    <updated>2018-02-08T10:05:29.587Z</updated>
    
    <content type="html"><![CDATA[<p>各种酷炫github头像！总有一款你喜欢的。<br><a id="more"></a></p><h3 id="随意下载。高能多图预警！"><a href="#随意下载。高能多图预警！" class="headerlink" title="随意下载。高能多图预警！"></a>随意下载。高能多图预警！</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github01.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github02.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github03.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github04.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github05.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github06.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github07.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github08.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github09.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github10.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github11.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github12.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github13.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github15.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github16.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github17.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github18.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github19.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github20.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github21.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github22.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github23.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github24.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github25.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github26.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github27.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github28.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github29.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github30.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github31.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github32.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github33.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github34.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github35.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github36.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github37.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github38.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github39.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github40.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/github/github41.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;各种酷炫github头像！总有一款你喜欢的。&lt;br&gt;
    
    </summary>
    
      <category term="杂" scheme="http://blog.jonyjay.com/categories/%E6%9D%82/"/>
    
    
      <category term="github" scheme="http://blog.jonyjay.com/tags/github/"/>
    
      <category term="娱乐" scheme="http://blog.jonyjay.com/tags/%E5%A8%B1%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>基于DaoCloud的持续化环境配置</title>
    <link href="http://blog.jonyjay.com//posts/16108/"/>
    <id>http://blog.jonyjay.com//posts/16108/</id>
    <published>2017-12-14T05:06:07.212Z</published>
    <updated>2018-04-09T06:22:26.110Z</updated>
    
    <content type="html"><![CDATA[<p>基于DaoCloud、nginx反向代理的单服务器多项目配置。<br><a id="more"></a><br>本文基于 <a href="https://juejin.im/post/5a142d7b6fb9a0451170c2c7" target="_blank" rel="noopener">https://juejin.im/post/5a142d7b6fb9a0451170c2c7</a> 《 基于 Docker 打造前端持续集成开发环境》 ，小白研究了偷懒的方法。如有大神有更好的办法，请赐教。</p><h2 id="基于DaoCloud、nginx反向代理的单服务器多项目配置"><a href="#基于DaoCloud、nginx反向代理的单服务器多项目配置" class="headerlink" title="基于DaoCloud、nginx反向代理的单服务器多项目配置"></a>基于DaoCloud、nginx反向代理的单服务器多项目配置</h2><p><strong>目标</strong>：</p><ol><li><p>代码无需在本地构建</p></li><li><p>只需将代码推上 Github ，自动部署</p></li><li><p>版本易管理，可轻松回退版本</p></li><li><p>配置多个docker容器指向 服务器不同端口，通过nginx反向代理</p></li></ol><h3 id="用简单的vue-cli项目举例"><a href="#用简单的vue-cli项目举例" class="headerlink" title="用简单的vue-cli项目举例"></a>用简单的vue-cli项目举例</h3><h4 id="第一步：-初始化-Vue-项目（使用vue官方脚手架-vue-cli）"><a href="#第一步：-初始化-Vue-项目（使用vue官方脚手架-vue-cli）" class="headerlink" title="第一步： 初始化 Vue 项目（使用vue官方脚手架 vue-cli）"></a>第一步： 初始化 Vue 项目（使用vue官方脚手架 vue-cli）</h4><ol><li><p>初始化 vue 项目：vue init webpack jay-www</p></li><li><p>在项目根目录下编 Dockerfile</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/blog/1513221051404.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><code>这里的DockerFIle配置没有仔细看 - - 只求偷懒。 技术有限，写的也都是些杂七杂八的就不做.gitignore /dist了,项目中直接构建好了提交。有各种优化Docker 容器运行速度的方法请google/baidu</code></p></li><li><p>初始化 git， 连接并将代码推送到 Github 仓库，</p></li></ol><h4 id="第二步：使用-DaoCloud-搭建-开发流程"><a href="#第二步：使用-DaoCloud-搭建-开发流程" class="headerlink" title="第二步：使用 DaoCloud 搭建 开发流程"></a>第二步：使用 DaoCloud 搭建 开发流程</h4><ol><li><p>注册一个 DaoCloud 账号</p></li><li><p>用户中心 -&gt; 代码托管，授权可访问你的 Github 仓库</p></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/blog/1513221590500.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li><p>在 Devops 项目中新建一个项目，并选择 Github 中对应刚才新创建的项目</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/blog/1513221698617.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li><p>先手动构建一个镜像版本，便于下面用这个镜像版本创建一个应用</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/blog/1513221750037.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li><p>连接自有主机</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/blog/1513221802241.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/blog/1513221841755.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ol><p>太酷了，我们已经将我们的主机接入了 DaoCloud，接下来就来完成最有意思的一步。</p><ol><li>创建一个应用</li></ol><p>进入【镜像仓库】选择刚才手动构建出来的镜像，并部署最新版本到自由主机或者云端测试环境<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/blog/1513221982263.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/blog/1513222006950.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>稍等片刻，便可以点击“立即部署”<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/blog/1513222246813.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>这边需要注意 : <strong>主机端口</strong> 将会与主机中nginx反向代理配置有关系<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/blog/1513222327949.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>7.定义自动构建，自动发布任务<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/blog/1513222380731.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/blog/1513222400721.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>至此，我们已经完成了，所有流程控制工作，去测试一下整个流程是否能走通？</p><h4 id="第三步：-测试整个流程"><a href="#第三步：-测试整个流程" class="headerlink" title="第三步： 测试整个流程"></a>第三步： 测试整个流程</h4><p>回到我们本地，修改一下文本内容，提交，并推送到远端，<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.jonyjay.com/blog/1513222497072.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>至此，我们在只编写了一个 Dockerfile 配置文件，没有编写脚本的情况下，成功地搭建了一套前端的持续集成开发环境。</p><h4 id="配置单主机不同域名-对应不同项目"><a href="#配置单主机不同域名-对应不同项目" class="headerlink" title="配置单主机不同域名 对应不同项目"></a>配置单主机不同域名 对应不同项目</h4><p>通过重复上面的操作，docker容器指向不同的主机端口。只要在主机nginx配置不同反向代理即可。研究了两天发现这个是最快捷的。最偷懒的 - - 虽然有很多弊端。。。仅供参考娱乐 ，不适合正规开发 。</p><pre><code>作者：三环没有少链接：https://juejin.im/post/5a142d7b6fb9a0451170c2c7来源：掘金著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于DaoCloud、nginx反向代理的单服务器多项目配置。&lt;br&gt;
    
    </summary>
    
      <category term="效率工具" scheme="http://blog.jonyjay.com/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="docker" scheme="http://blog.jonyjay.com/tags/docker/"/>
    
      <category term="nginx" scheme="http://blog.jonyjay.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.jonyjay.com//posts/16107/"/>
    <id>http://blog.jonyjay.com//posts/16107/</id>
    <published>2017-12-05T05:36:16.880Z</published>
    <updated>2018-04-09T06:22:39.480Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇用来测试的文章。<br><a id="more"></a></p><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇用来测试的文章。&lt;br&gt;
    
    </summary>
    
      <category term="杂" scheme="http://blog.jonyjay.com/categories/%E6%9D%82/"/>
    
    
      <category term="Hexo" scheme="http://blog.jonyjay.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
